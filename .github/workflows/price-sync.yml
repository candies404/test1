# .github/workflows/price-sync.yml

name: 价格同步

# 设置触发条件
on:
  # 定时触发，使用cron表达式
  # schedule:
  #   # 每天凌晨2点（UTC时间，对应北京时间10点）运行
  #   - cron: '0 2 * * *'
  
  # 允许手动触发
  workflow_dispatch:
    # 可选的手动触发参数
    inputs:
      reason:
        description: '触发原因'
        required: false
        default: '手动触发同步'

# 环境变量配置
env:
  # 定义环境变量，实际值将从GitHub Secrets中获取
  ONEHUB_ADMIN_TOKEN: ${{ secrets.ONEHUB_ADMIN_TOKEN }}
  JSON_URL: ${{ secrets.JSON_URL }}
  ONEHUB_URL: ${{ secrets.ONEHUB_URL }}

# 工作流任务
jobs:
  sync-prices:
    name: 同步价格数据
    runs-on: ubuntu-latest
    
    steps:
      # 1. 检出代码仓库
      - name: 检出代码
        uses: actions/checkout@v4
      
      # 2. 设置Python环境
      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      # 3. 安装依赖
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      # 4. 运行价格同步脚本
      - name: 运行价格同步脚本
        run: |
          cat > price_sync.py << 'EOF'
          #!/usr/bin/env python3
          # -*- coding: utf-8 -*-

          """
          价格同步脚本
          功能：从JSON_URL获取价格数据并同步到ONEHUB_URL
          """

          import os
          import sys
          import json
          import requests
          from typing import Dict, List, Any

          def get_env_variable(name: str) -> str:
              """获取环境变量值，如果不存在则退出程序

              参数:
                  name: 环境变量名称

              返回:
                  环境变量的值

              异常:
                  SystemExit: 如果环境变量不存在
              """
              value = os.getenv(name)
              if not value:
                  print(f"错误：未设置环境变量 {name}")
                  sys.exit(1)
              return value

          def fetch_json_data(url: str, headers: Dict[str, str]) -> List[Dict[str, Any]]:
              """从指定URL获取JSON数据并提取data字段

              参数:
                  url: JSON数据URL
                  headers: 请求头

              返回:
                  JSON响应中data字段的值(应为列表格式)

              异常:
                  SystemExit: 如果请求失败或数据格式不正确
              """
              try:
                  print(f"正在从 {url} 获取数据...")
                  response = requests.get(url, headers=headers)
                  response.raise_for_status()  # 如果请求失败则抛出异常

                  result = response.json()

                  # 检查是否存在data字段
                  if "data" not in result:
                      print("错误：响应中缺少data字段")
                      sys.exit(1)

                  data = result["data"]

                  if not isinstance(data, list):
                      print("错误：data字段不是预期的数组格式")
                      sys.exit(1)

                  print(f"成功获取 {len(data)} 条价格数据")
                  return data
              except requests.exceptions.RequestException as e:
                  print(f"获取JSON数据失败: {e}")
                  sys.exit(1)
              except json.JSONDecodeError as e:
                  print(f"解析JSON响应失败: {e}")
                  sys.exit(1)
              except KeyError:
                  print("错误：响应中找不到data字段")
                  sys.exit(1)

          def sync_prices(api_url: str, data: List[Dict[str, Any]], headers: Dict[str, str]) -> bool:
              """将价格数据同步到API

              参数:
                  api_url: API基础URL
                  data: 要同步的价格数据
                  headers: 请求头

              返回:
                  同步是否成功

              异常:
                  SystemExit: 如果请求失败
              """
              sync_url = f"{api_url}/api/prices/sync?updateMode=overwrite"
              try:
                  print(f"正在将价格数据同步到 {sync_url}...")
                  response = requests.post(
                      sync_url,
                      headers=headers,
                      json=data
                  )
                  response.raise_for_status()

                  result = response.json()
                  if result.get("success"):
                      print("价格同步成功")
                      return True
                  else:
                      print(f"同步失败: {result.get('message', '未知错误')}")
                      return False
              except requests.exceptions.RequestException as e:
                  print(f"同步价格数据失败: {e}")
                  sys.exit(1)
              except json.JSONDecodeError as e:
                  print(f"解析API响应失败: {e}")
                  sys.exit(1)

          def main():
              # 1. 从环境变量读取配置
              print("正在读取环境变量配置...")
              admin_token = get_env_variable("ONEHUB_ADMIN_TOKEN")
              json_url = get_env_variable("JSON_URL")
              onehub_url = get_env_variable("ONEHUB_URL")

              # 2. 设置请求头
              headers = {
                  "Authorization": f"Bearer {admin_token}",
                  "Content-Type": "application/json",
              }

              # 3. 获取JSON数据中的data字段
              price_data = fetch_json_data(json_url, headers)

              # 4. 同步数据到OneHub
              success = sync_prices(onehub_url, price_data, headers)

              if not success:
                  sys.exit(1)

          if __name__ == "__main__":
              main()
          EOF
          
          # 设置执行权限并运行脚本
          chmod +x price_sync.py
          python price_sync.py
      
      # 5. 记录运行结果
      - name: 记录运行时间
        if: success()
        run: |
          echo "价格同步成功完成于 $(date)" >> sync_history.log
          
      # 6. 通知失败（可选）
      - name: 发送失败通知
        if: failure()
        # 这里可以使用各种通知Actions，例如发送邮件、Slack通知等
        # 例如使用Slack通知（需要配置SLACK_WEBHOOK_URL密钥）
        # uses: 8398a7/action-slack@v3
        # with:
        #   status: failure
        #   fields: repo,workflow,job,commit
        # env:
        #   SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "价格同步失败！请检查运行日志。"
