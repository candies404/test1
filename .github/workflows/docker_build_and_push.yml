name: Docker镜像自动化构建

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: "目标仓库地址（格式：owner/repo）"
        required: true
        type: string
      dockerfile_path:
        description: "Dockerfile相对路径（默认：./Dockerfile）"
        required: false
        type: string
        default: "Dockerfile"
      dockerfile_content_base64:
        description: "Dockerfile内容（base64编码）"
        required: false
        type: string
      image_name:
        description: "镜像名（默认使用目标仓库名）"
        required: false
        type: string
      image_tag:
        description: "镜像标签（默认：latest）"
        required: false
        type: string
        default: "latest"

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  docker-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: 验证并克隆目标仓库
        run: |
          repo_url="https://github.com/${{ github.event.inputs.target_repo }}.git"
          if ! git ls-remote --quiet "$repo_url" > /dev/null 2>&1; then
            echo "::error::仓库不存在或无权访问: $repo_url"
            exit 1
          fi
          echo "正在克隆仓库..."
          git clone "$repo_url" ./source

      - name: 准备构建环境
        working-directory: ./source
        run: |
            echo "验证Dockerfile位置：${{ github.event.inputs.dockerfile_path }}"
            if [ -n "${{ github.event.inputs.dockerfile_content_base64 }}" ]; then
            mkdir -p $(dirname "${{ github.event.inputs.dockerfile_path }}")
            echo "${{ github.event.inputs.dockerfile_content_base64 }}" | base64 -d > "${{ github.event.inputs.dockerfile_path }}"
            echo "✔ 已生成动态Dockerfile"
            fi
            
            # 检查镜像名称是否包含路径，如果有则创建对应目录
            if [ -n "${{ github.event.inputs.image_name }}" ] && [[ "${{ github.event.inputs.image_name }}" == */* ]]; then
            IMAGE_PATH=$(dirname "${{ github.event.inputs.image_name }}")
            mkdir -p "$IMAGE_PATH"
            echo "✔ 已创建镜像路径目录: $IMAGE_PATH"
            fi

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: 构建并推送镜像
        working-directory: ./source
        run: |
            # 确定镜像名称
            if [ -z "${{ github.event.inputs.image_name }}" ]; then
                REPO_NAME=$(basename "${{ github.event.inputs.target_repo }}")
                IMAGE_NAME="${{ env.DOCKERHUB_USERNAME }}/$REPO_NAME"
            else
                # 检查是否已经包含用户名前缀
                if [[ "${{ github.event.inputs.image_name }}" != *"/"* ]]; then
                    IMAGE_NAME="${{ env.DOCKERHUB_USERNAME }}/${{ github.event.inputs.image_name }}"
                else
                    IMAGE_NAME="${{ github.event.inputs.image_name }}"
                fi
            fi
            
            # 构建并推送镜像
            FULL_IMAGE_NAME="$IMAGE_NAME:${{ github.event.inputs.image_tag }}"
            echo "开始构建镜像：$FULL_IMAGE_NAME"
            docker build -t $FULL_IMAGE_NAME -f "${{ github.event.inputs.dockerfile_path }}" .
            echo "✔ 镜像构建完成"
            
            echo "开始推送镜像..."
            docker push $FULL_IMAGE_NAME
            echo "✔ 镜像已推送至 Docker Hub"
