name: "Docker镜像自动化构建"

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: '目标仓库地址（格式：owner/repo）'
        required: true
        type: string
      dockerfile_path:
        description: 'Dockerfile相对路径（默认：./Dockerfile）'
        required: false
        type: string
        default: 'Dockerfile'
      dockerfile_content:
        description: 'Dockerfile内容（选填）'
        required: false
        type: string
      image_name:
        description: '镜像名（默认使用目标仓库名）'
        required: false
        type: string
      image_tag:
        description: '镜像标签（默认：latest）'
        required: false
        type: string
        default: 'latest'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  docker-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: 验证并克隆目标仓库
        run: |
          repo_url="https://github.com/${{ github.event.inputs.target_repo }}.git"
          if ! git ls-remote --quiet "$repo_url" > /dev/null 2>&1; then
            echo "::error::仓库不存在或无权访问: $repo_url"
            exit 1
          fi
          echo "正在克隆仓库..."
          git clone "$repo_url" ./source

      - name: 准备构建环境
        working-directory: ./source  # 关键修正：设置工作目录
        run: |
          echo "验证Dockerfile位置：${{ github.event.inputs.dockerfile_path }}"
          if [ -n "${{ github.event.inputs.dockerfile_content }}" ]; then
            mkdir -p $(dirname "${{ github.event.inputs.dockerfile_path }}")
            echo "${{ github.event.inputs.dockerfile_content }}" > "${{ github.event.inputs.dockerfile_path }}"
            echo "✔ 已生成动态Dockerfile"
          fi

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: 构建并推送镜像
        working-directory: ./source  # 关键修正：确保构建上下文正确
        run: |
          if [ -z "${{ github.event.inputs.image_name }}" ]; then
            REPO_NAME=$(basename "${{ github.event.inputs.target_repo }}")
            IMAGE_NAME="${{ env.DOCKERHUB_USERNAME }}/$REPO_NAME"
          else
            IMAGE_NAME="${{ github.event.inputs.image_name }}"
          fi
          TAG="$IMAGE_NAME:${{ github.event.inputs.image_tag }}"
          echo "开始构建镜像：$TAG"
          docker build -t $TAG -f "${{ github.event.inputs.dockerfile_path }}" .
          docker push $TAG
          echo "✔ 镜像已推送至仓库"
