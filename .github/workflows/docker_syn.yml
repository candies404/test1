name: Docker 镜像同步

on:
  # schedule:
  #   - cron: '0 0 * * *'  # 每天 UTC 0:00 运行（北京时间 8:00）
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步映射（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  image-sync:
    name: 镜像同步
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_SYNC_MAPPINGS: ${{ vars.DOCKER_SYNC_MAPPINGS }}
      DOCKER_MIRRORS: ${{ vars.DOCKER_MIRRORS }}
      BUILDKIT_PROGRESS: plain

    steps:
      - name: 验证镜像同步格式
        id: validate-mappings
        run: |
          # 优先使用手动输入
          if [ -n "${{ github.event.inputs.sync_mappings }}" ]; then
            echo "使用手动输入的同步映射"
            PROCESSED_MAPPINGS="${{ github.event.inputs.sync_mappings }}"
          else
            echo "使用环境变量中的同步映射"
            PROCESSED_MAPPINGS="$DOCKER_SYNC_MAPPINGS"
          fi

          # 清理特殊字符并校验格式
          CLEAN_MAPPINGS=$(echo "$PROCESSED_MAPPINGS" | tr -d '\n' | tr -s ' ' | sed -e 's/ //g' -e 's/,+/,/g')
          if [ -z "$CLEAN_MAPPINGS" ]; then
            echo "::error::未配置同步映射，请设置DOCKER_SYNC_MAPPINGS环境变量或手动输入"
            exit 1
          fi

          # 验证至少包含一个有效映射对
          if ! grep -qE '^([^=]+=[^=]+)(,[^=]+=[^=]+)*$' <<< "$CLEAN_MAPPINGS"; then
            echo "::error::无效的映射格式，请使用'src=dst,src2=dst2'格式"
            exit 1
          fi

          echo "SYNC_MAPPINGS=${CLEAN_MAPPINGS}" >> $GITHUB_ENV
          
          # 处理Docker镜像源
          if [ -n "$DOCKER_MIRRORS" ]; then
            # 转换每行一个的格式为逗号分隔
            CLEAN_MIRRORS=$(echo "$DOCKER_MIRRORS" | tr '\n' ',' | sed 's/,$//')
            echo "DOCKER_MIRROR_LIST=${CLEAN_MIRRORS}" >> $GITHUB_ENV
            echo "已配置Docker镜像源: ${CLEAN_MIRRORS}"
          else
            echo "DOCKER_MIRROR_LIST=" >> $GITHUB_ENV
            echo "未配置Docker镜像源，将直接使用docker.io"
          fi

      - name: 设置多架构构建环境
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled  # 启用实验特性

      - name: 安装 skopeo
        run: |
          echo "🛠️ 正在安装 skopeo..."
          sudo apt-get update -qq && sudo apt-get install -y skopeo
          echo "✅ skopeo $(skopeo --version | awk '{print $3}') 安装完成"

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
        env:
          DOCKER_REGISTRY: index.docker.io

      - name: 执行镜像同步
        id: sync
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          # 颜色定义
          readonly COLOR_RESET="\033[0m"
          readonly COLOR_SRC="\033[1;34m"
          readonly COLOR_DST="\033[1;35m"
          readonly COLOR_OK="\033[1;32m"
          readonly COLOR_WARN="\033[1;33m"
          readonly COLOR_ERR="\033[1;31m"

          # 日志函数
          log() {
            local level=$1
            local message=$2
            local timestamp
            timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            case $level in
              "INFO") echo -e "${COLOR_OK}[${timestamp}] INFO: ${message}${COLOR_RESET}" >&2 ;;
              "WARN") echo -e "${COLOR_WARN}[${timestamp}] WARN: ${message}${COLOR_RESET}" >&2 ;;
              "ERROR") echo -e "${COLOR_ERR}[${timestamp}] ERROR: ${message}${COLOR_RESET}" >&2 ;;
            esac
          }

          # 结果收集变量
          success_images=""
          skipped_images=""
          failed_images=""
          
          # 处理Docker镜像源列表
          IFS=',' read -ra DOCKER_MIRROR_ARRAY <<< "$DOCKER_MIRROR_LIST"
          # 默认添加官方Docker源作为最后的备选项
          DOCKER_MIRROR_ARRAY+=("docker.io")
          log "INFO" "配置的Docker镜像源: ${DOCKER_MIRROR_ARRAY[*]}"

          # 解析环境变量到关联数组
          declare -A SYNC_MAP=()
          IFS=',' read -ra MAPPING_PAIRS <<< "$SYNC_MAPPINGS"
          for pair in "${MAPPING_PAIRS[@]}"; do
            key="${pair%%=*}"
            value="${pair#*=}"
            if [[ -z "$key" || -z "$value" ]]; then
              log "ERROR" "无效的映射对: $pair"
              exit 1
            fi
            SYNC_MAP["$key"]="$value"
          done

          normalize_image() {
            local image_ref=$1 default_tag=$2 context=$3 registry=$4
            local image_name image_tag

            if [[ "$image_ref" == *":"* ]]; then
              image_name="${image_ref%:*}"
              image_tag="${image_ref#*:}"
            else
              image_name="$image_ref"
              image_tag="$default_tag"
            fi

            case $context in
              "source")
                if [[ "$image_name" == *"/"* ]]; then
                  printf "%s/%s:%s" "$registry" "$image_name" "$image_tag"
                else
                  printf "%s/library/%s:%s" "$registry" "$image_name" "$image_tag"
                fi
                ;;
              "target")
                if [[ "$image_name" == *"/"* ]]; then
                  printf "docker.io/%s:%s" "$image_name" "$image_tag"
                else
                  printf "docker.io/%s/%s:%s" "$DEST_REPO" "$image_name" "$image_tag"
                fi
                ;;
              *)
                log "ERROR" "无效上下文参数: $context"
                exit 1
                ;;
            esac
          }

          get_architecture() {
            local image=$1
            log "INFO" "获取架构信息：${COLOR_SRC}$image${COLOR_RESET}"
            # 仅检查是否存在 manifests 数组
            if raw_manifest=$(skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$image" 2>&1) &&
                jq -e '.manifests != null' <<< "$raw_manifest" &>/dev/null; then
                local arch_list
                arch_list=$(jq -r '
                [.manifests[].platform |
                    select(.os != "unknown" and .architecture != "unknown") |
                    "\(.os)/\(.architecture)\(if .variant != "" then "/"+.variant else "" end)" |
                    sub("/$"; "")  # 关键修正点
                ] | unique | join(",")' <<< "$raw_manifest")
                [[ -z "$arch_list" ]] && { log "ERROR" "无有效架构信息"; return 1; }
                log "INFO" "📦 检测到多架构镜像：$arch_list"
                echo "$arch_list"
                return 0
            else
              local inspect_info os arch variant
              inspect_info=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$image" 2>/dev/null)
              os=$(jq -r '.Os // "unknown"' <<< "$inspect_info")
              arch=$(jq -r '.Architecture // "unknown"' <<< "$inspect_info")
              variant=$(jq -r '.Variant? // ""' <<< "$inspect_info")

              [[ "$os" == "unknown" || "$arch" == "unknown" ]] && {
                log "INFO" "🧬 单架构信息：unknown"
                echo "unknown"
                return 0
              }

              local result="${os}/${arch}"
              [[ -n "$variant" ]] && result+="/$variant"
              case "$arch" in
                "arm64")
                  result="linux/arm64/v8"
                  ;;
                "arm")
                  [[ "$variant" == "v7" ]] && result="linux/arm/v7"
                  ;;
              esac
              log "INFO" "🧬 单架构信息：$result"
              echo "$result"
            fi
          }

          sync_image() {
            local src=$1 dst=$2
            log "INFO" "启动同步：${COLOR_SRC}$src → ${COLOR_DST}$dst"
            skopeo copy --all --src-creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" \
                        --dest-creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" \
                        "docker://$src" "docker://$dst" || {
                log "ERROR" "同步失败"
                return 1
            }
            log "INFO" "同步完成"
          }

          try_with_mirrors() {
            local source_ref=$1
            local function_name=$2
            local success=false
            local result=""
            local original_image=""
            
            # 使用循环尝试每个镜像源
            for mirror in "${DOCKER_MIRROR_ARRAY[@]}"; do
              log "INFO" "尝试使用镜像源: $mirror"
              local src_image=$(normalize_image "$source_ref" "latest" "source" "$mirror")
              
              # 保存原始镜像引用（第一次迭代时）
              if [[ -z "$original_image" ]]; then
                original_image="$src_image"
              fi
              
              if [[ "$function_name" == "get_architecture" ]]; then
                if arch=$(get_architecture "$src_image" 2>/dev/null); then
                  result="$arch"
                  success=true
                  log "INFO" "成功从 $mirror 获取架构信息"
                  break
                else
                  log "WARN" "从 $mirror 获取架构信息失败，尝试下一个镜像源"
                fi
              elif [[ "$function_name" == "get_digest" ]]; then
                if digest=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" --format '{{.Digest}}' "docker://$src_image" 2>/dev/null); then
                  result="$digest"
                  success=true
                  log "INFO" "成功从 $mirror 获取镜像摘要"
                  break
                else
                  log "WARN" "从 $mirror 获取镜像摘要失败，尝试下一个镜像源"
                fi
              elif [[ "$function_name" == "sync" ]]; then
                local dst_image="$2"
                if sync_image "$src_image" "$dst_image"; then
                  success=true
                  log "INFO" "使用 $mirror 镜像源同步成功"
                  break
                else
                  log "WARN" "使用 $mirror 镜像源同步失败，尝试下一个镜像源"
                fi
              fi
            done
            
            if ! $success; then
              log "ERROR" "所有镜像源都失败: $original_image"
              return 1
            fi
            
            echo "$result"
            return 0
          }

          # 处理同步循环
          for source_ref in "${!SYNC_MAP[@]}"; do
            echo "::group::🔄 Processing $source_ref"
            dst_ref="${SYNC_MAP[$source_ref]}"
            dst_image=$(normalize_image "$dst_ref" "latest" "target" "docker.io")

            echo -e "${COLOR_OK}架构对比报告：${COLOR_RESET}"

            # 使用镜像源尝试获取源镜像架构
            src_arch=$(try_with_mirrors "$source_ref" "get_architecture")
            if [[ $? -ne 0 ]]; then
              log "ERROR" "无法获取源镜像架构信息"
              failed_images+="❌ \`${source_ref}\` → \`${dst_ref}\` (无法获取源镜像架构)\n"
              echo "::endgroup::"
              continue
            fi

            # 检查目标镜像是否存在
            if target_info=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$dst_image" 2>/dev/null); then
              dst_arch=$(get_architecture "$dst_image" 2>/dev/null || echo "N/A")
              dst_exists=true
              dst_digest=$(jq -r '.Digest' <<< "$target_info")
            else
              dst_arch="N/A"
              dst_exists=false
              dst_digest="N/A"
            fi

            # 使用镜像源尝试获取源镜像摘要
            src_digest=$(try_with_mirrors "$source_ref" "get_digest")
            if [[ $? -ne 0 ]]; then
              log "ERROR" "无法获取源镜像摘要"
              failed_images+="❌ \`${source_ref}\` → \`${dst_ref}\` (无法获取源镜像摘要)\n"
              echo "::endgroup::"
              continue
            fi

            # 检查是否需要同步
            if $dst_exists && [[ "$dst_digest" == "$src_digest" ]]; then
              log "INFO" "源Digest: ${COLOR_SRC}$src_digest${COLOR_RESET}"
              log "INFO" "目标Digest: ${COLOR_DST}$dst_digest${COLOR_RESET}"
              log "INFO" "目标镜像已是最新，跳过同步"
              skipped_images+="🔜 ${source_ref} → ${dst_ref}\n"
              echo "::endgroup::"
              continue
            fi

            # 执行同步
            if try_with_mirrors "$source_ref" "sync" "$dst_image"; then
              success_images+="✅ \`${source_ref}\` → \`${dst_ref}\`\n"
            else
              failed_images+="❌ \`${source_ref}\` → \`${dst_ref}\`\n"
            fi

            echo "::endgroup::"
          done

          # 生成通知内容
          notification_content=""

          if [[ -n "$success_images" ]]; then
            notification_content+="🎉 **同步成功**：\n${success_images}\n"
            echo "HAS_SUCCESS=true" >> $GITHUB_ENV
          else
            notification_content+="🎉 **同步成功**：无\n\n"
            echo "HAS_SUCCESS=false" >> $GITHUB_ENV
          fi

          if [[ -n "$skipped_images" ]]; then
            notification_content+="⏩ **跳过同步**：\n${skipped_images}\n"
          else
            notification_content+="🔜 **跳过同步**：无\n\n"
          fi

          if [[ -n "$failed_images" ]]; then
            notification_content+="💥 **失败任务**：\n${failed_images}"
          else
            notification_content+="✅ **失败任务**：无"
          fi

          # 保存到环境变量
          echo "NOTIFICATION_CONTENT<<EOF" >> $GITHUB_ENV
          echo -e "$notification_content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # 设置结果标记
          if [[ -n "$success_images" ]]; then
            echo "HAS_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "HAS_SUCCESS=false" >> $GITHUB_ENV
          fi

      - name: 发送通知
        uses: candies404/Multi-Channel-Notifier@latest
        if: ${{ env.HAS_SUCCESS == 'true' }}
        with:
          title: "镜像同步结果"
          content: |
            ${{ env.NOTIFICATION_CONTENT }}
          hitokoto: 'false'
          wpush_key: ${{ secrets.WPUSH_KEY }}
