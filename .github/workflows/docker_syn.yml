name: Docker 镜像同步

on:
  # schedule:
  #   - cron: '0 0 * * *'  # 每天 UTC 0:00 运行（北京时间 8:00）
  workflow_dispatch:
    inputs:
      sync_mappings:
        description: '镜像同步映射（格式：源镜像=目标镜像，多个用逗号分隔）'
        required: false

jobs:
  image-sync:
    name: 镜像同步
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DEST_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_SYNC_MAPPINGS: ${{ vars.DOCKER_SYNC_MAPPINGS }}
      # 添加镜像源环境变量，多个用换行分隔
      DOCKER_MIRRORS: ${{ vars.DOCKER_MIRRORS }}
      # docker.io 作为保底镜像源
      DEFAULT_MIRROR: docker.io
      BUILDKIT_PROGRESS: plain

    steps:
      - name: 验证镜像同步格式
        id: validate-mappings
        run: |
          # 优先使用手动输入
          if [ -n "${{ github.event.inputs.sync_mappings }}" ]; then
            echo "使用手动输入的同步映射"
            PROCESSED_MAPPINGS="${{ github.event.inputs.sync_mappings }}"
          else
            echo "使用环境变量中的同步映射"
            PROCESSED_MAPPINGS="$DOCKER_SYNC_MAPPINGS"
          fi

          # 清理特殊字符并校验格式
          CLEAN_MAPPINGS=$(echo "$PROCESSED_MAPPINGS" | tr -d '\r' | tr -s ' ' | sed -e 's/ //g' -e 's/,+/,/g')
          if [ -z "$CLEAN_MAPPINGS" ]; then
            echo "::error::未配置同步映射，请设置DOCKER_SYNC_MAPPINGS环境变量或手动输入"
            exit 1
          fi

          # 验证至少包含一个有效映射对
          if ! grep -qE '^([^=]+=[^=]+)(,[^=]+=[^=]+)*$' <<< "$CLEAN_MAPPINGS"; then
            echo "::error::无效的映射格式，请使用'src=dst,src2=dst2'格式"
            exit 1
          fi

          # 保存清理后的同步映射
          echo "SYNC_MAPPINGS=${CLEAN_MAPPINGS}" >> $GITHUB_ENV
          
          # 处理镜像源配置 - 确保移除所有 \r 字符
          if [ -n "$DOCKER_MIRRORS" ]; then
            # 清理镜像源中的换行符和回车符，转换为逗号分隔列表
            CLEAN_MIRRORS=$(echo "$DOCKER_MIRRORS" | tr -d '\r' | tr '\n' ',' | sed 's/,$//')
            echo "已配置镜像源: $CLEAN_MIRRORS"
            echo "AVAILABLE_MIRRORS=${CLEAN_MIRRORS}" >> $GITHUB_ENV
          else
            echo "未配置镜像源，将使用默认镜像源 docker.io"
            echo "AVAILABLE_MIRRORS=$DEFAULT_MIRROR" >> $GITHUB_ENV
          fi

      - name: 设置多架构构建环境
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled  # 启用实验特性

      - name: 安装 skopeo
        run: |
          echo "🛠️ 正在安装 skopeo..."
          sudo apt-get update -qq && sudo apt-get install -y skopeo
          echo "✅ skopeo $(skopeo --version | awk '{print $3}') 安装完成"

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
        env:
          DOCKER_REGISTRY: index.docker.io

      - name: 执行镜像同步
        id: sync
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          # 颜色定义
          readonly COLOR_RESET="\033[0m"
          readonly COLOR_SRC="\033[1;34m"
          readonly COLOR_DST="\033[1;35m"
          readonly COLOR_OK="\033[1;32m"
          readonly COLOR_WARN="\033[1;33m"
          readonly COLOR_ERR="\033[1;31m"

          # 日志函数
          log() {
            local level=$1
            local message=$2
            local timestamp
            timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            case $level in
              "INFO") echo -e "${COLOR_OK}[${timestamp}] INFO: ${message}${COLOR_RESET}" >&2 ;;
              "WARN") echo -e "${COLOR_WARN}[${timestamp}] WARN: ${message}${COLOR_RESET}" >&2 ;;
              "ERROR") echo -e "${COLOR_ERR}[${timestamp}] ERROR: ${message}${COLOR_RESET}" >&2 ;;
            esac
          }

          # 结果收集变量
          success_images=""
          skipped_images=""
          failed_images=""
          
          # 处理镜像源列表
          IFS=',' read -ra MIRRORS <<< "$AVAILABLE_MIRRORS"
          log "INFO" "已配置的镜像源: ${MIRRORS[*]}"
          
          # 设置默认镜像源
          DEFAULT_MIRROR="docker.io"

          # 获取可用的镜像源
          get_available_mirror() {
            local image=$1
            local available_mirror=""
            
            # 先尝试所有配置的镜像源
            for mirror in "${MIRRORS[@]}"; do
              # 确保镜像源没有多余的空格或换行符
              mirror=$(echo "$mirror" | tr -d '[:space:]')
              if [ -z "$mirror" ]; then
                continue
              fi
              
              local mirror_image="${image/docker.io/$mirror}"
              log "INFO" "尝试镜像源: ${COLOR_SRC}$mirror${COLOR_RESET} → ${COLOR_DST}$mirror_image"
              
              if timeout 10s skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$mirror_image" &>/dev/null; then
                log "INFO" "镜像源 ${COLOR_OK}$mirror${COLOR_RESET} 可用"
                available_mirror="$mirror"
                break
              else
                log "WARN" "镜像源 ${COLOR_WARN}$mirror${COLOR_RESET} 不可用，尝试下一个"
              fi
            done
            
            # 如果所有镜像源都失效，使用保底源 docker.io
            if [ -z "$available_mirror" ]; then
              log "WARN" "所有镜像源不可用，使用保底源 ${COLOR_WARN}$DEFAULT_MIRROR${COLOR_RESET}"
              available_mirror="$DEFAULT_MIRROR"
            fi
            
            echo "$available_mirror"
          }

          # 解析环境变量到关联数组
          declare -A SYNC_MAP=()
          IFS=',' read -ra MAPPING_PAIRS <<< "$SYNC_MAPPINGS"
          for pair in "${MAPPING_PAIRS[@]}"; do
            key="${pair%%=*}"
            value="${pair#*=}"
            if [[ -z "$key" || -z "$value" ]]; then
              log "ERROR" "无效的映射对: $pair"
              exit 1
            fi
            # 确保键值没有多余的空格或换行符
            key=$(echo "$key" | tr -d '[:space:]')
            value=$(echo "$value" | tr -d '[:space:]')
            SYNC_MAP["$key"]="$value"
          done

          normalize_image() {
            local image_ref=$1 default_tag=$2 context=$3 mirror=$4
            local image_name image_tag

            # 确保镜像名称没有特殊字符
            image_ref=$(echo "$image_ref" | tr -d '\r')
            
            if [[ "$image_ref" == *":"* ]]; then
              image_name="${image_ref%:*}"
              image_tag="${image_ref#*:}"
            else
              image_name="$image_ref"
              image_tag="$default_tag"
            fi

            case $context in
              "source")
                if [[ "$image_name" == *"/"* ]]; then
                  # 应用镜像源替换
                  printf "%s/%s:%s" "$mirror" "$image_name" "$image_tag"
                else
                  # library 镜像，应用镜像源替换
                  printf "%s/library/%s:%s" "$mirror" "$image_name" "$image_tag"
                fi
                ;;
              "target")
                if [[ "$image_name" == *"/"* ]]; then
                  printf "docker.io/%s:%s" "$image_name" "$image_tag"
                else
                  printf "docker.io/%s/%s:%s" "$DEST_REPO" "$image_name" "$image_tag"
                fi
                ;;
              *)
                log "ERROR" "无效上下文参数: $context"
                exit 1
                ;;
            esac
          }

          get_architecture() {
            local image=$1
            log "INFO" "获取架构信息：${COLOR_SRC}$image${COLOR_RESET}"
            # 仅检查是否存在 manifests 数组
            if raw_manifest=$(skopeo inspect --raw --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$image" 2>&1) &&
                jq -e '.manifests != null' <<< "$raw_manifest" &>/dev/null; then
                local arch_list
                arch_list=$(jq -r '
                [.manifests[].platform |
                    select(.os != "unknown" and .architecture != "unknown") |
                    "\(.os)/\(.architecture)\(if .variant != "" then "/"+.variant else "" end)" |
                    sub("/$"; "")  # 关键修正点
                ] | unique | join(",")' <<< "$raw_manifest")
                [[ -z "$arch_list" ]] && { log "ERROR" "无有效架构信息"; return 1; }
                log "INFO" "📦 检测到多架构镜像：$arch_list"
                echo "$arch_list"
                return 0
            else
              local inspect_info os arch variant
              inspect_info=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$image" 2>/dev/null)
              os=$(jq -r '.Os // "unknown"' <<< "$inspect_info")
              arch=$(jq -r '.Architecture // "unknown"' <<< "$inspect_info")
              variant=$(jq -r '.Variant? // ""' <<< "$inspect_info")

              [[ "$os" == "unknown" || "$arch" == "unknown" ]] && {
                log "INFO" "🧬 单架构信息：unknown"
                echo "unknown"
                return 0
              }

              local result="${os}/${arch}"
              [[ -n "$variant" ]] && result+="/$variant"
              case "$arch" in
                "arm64")
                  result="linux/arm64/v8"
                  ;;
                "arm")
                  [[ "$variant" == "v7" ]] && result="linux/arm/v7"
                  ;;
              esac
              log "INFO" "🧬 单架构信息：$result"
              echo "$result"
            fi
          }

          sync_image() {
            local src=$1 dst=$2
            log "INFO" "启动同步：${COLOR_SRC}$src → ${COLOR_DST}$dst"
            skopeo copy --all --src-creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" \
                        --dest-creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" \
                        "docker://$src" "docker://$dst" || {
                log "ERROR" "同步失败"
                return 1
            }
            log "INFO" "同步完成"
          }

          # 处理同步循环
          for source_ref in "${!SYNC_MAP[@]}"; do
            echo "::group::🔄 Processing $source_ref"
            
            # 获取可用的镜像源
            available_mirror=$(get_available_mirror "$source_ref")
            log "INFO" "使用镜像源: ${COLOR_OK}$available_mirror${COLOR_RESET}"
            
            src_image=$(normalize_image "$source_ref" "latest" "source" "$available_mirror")
            dst_ref="${SYNC_MAP[$source_ref]}"
            dst_image=$(normalize_image "$dst_ref" "$(cut -d: -f2 <<< "$src_image")" "target" "docker.io")

            echo -e "${COLOR_OK}架构对比报告：${COLOR_RESET}"

            # 先尝试获取源镜像信息
            if ! src_arch=$(get_architecture "$src_image" | tail -1 2>/dev/null); then
              log "ERROR" "无法获取源镜像架构信息，可能镜像不存在或无法访问"
              failed_images+="❌ 源镜像不可访问: \`${src_image}\`\n"
              echo "::endgroup::"
              continue
            fi
            
            # 尝试获取目标镜像信息
            if target_info=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" "docker://$dst_image" 2>/dev/null); then
              dst_arch=$(get_architecture "$dst_image" | tail -1)
              dst_exists=true
            else
              log "INFO" "目标镜像不存在，将创建新镜像"
              dst_arch="N/A"
              dst_exists=false
            fi

            # 获取源镜像的摘要
            src_digest=$(skopeo inspect --creds "${DOCKERHUB_USER}:${DOCKERHUB_TOKEN}" --format '{{.Digest}}' "docker://$src_image")
            
            if $dst_exists; then
                dst_digest=$(jq -r '.Digest' <<< "$target_info")
                if [[ "$dst_digest" == "$src_digest" ]]; then
                    log "INFO" "源Digest: ${COLOR_SRC}$src_digest${COLOR_RESET}"
                    log "INFO" "目标Digest: ${COLOR_DST}$dst_digest${COLOR_RESET}"
                    log "INFO" "目标镜像已是最新，跳过同步"
                    skipped_images+="🔜 从 ${available_mirror} 同步: ${src_image} → ${dst_image}\n"
                    echo "::endgroup::"
                    continue
                fi
            fi

            if sync_image "$src_image" "$dst_image"; then
              success_images+="✅ 从 ${available_mirror} 同步: \`${src_image}\` → \`${dst_image}\`\n"
            else
              failed_images+="❌ 从 ${available_mirror} 同步: \`${src_image}\` → \`${dst_image}\`\n"
            fi

            echo "::endgroup::"
          done

          # 生成通知内容
          notification_content=""

          if [[ -n "$success_images" ]]; then
            notification_content+="🎉 **同步成功**：\n${success_images}\n"
            echo "HAS_SUCCESS=true" >> $GITHUB_ENV
          else
            notification_content+="🎉 **同步成功**：无\n\n"
            echo "HAS_SUCCESS=false" >> $GITHUB_ENV
          fi

          if [[ -n "$skipped_images" ]]; then
            notification_content+="⏩ **跳过同步**：\n${skipped_images}\n"
          else
            notification_content+="🔜 **跳过同步**：无\n\n"
          fi

          if [[ -n "$failed_images" ]]; then
            notification_content+="💥 **失败任务**：\n${failed_images}"
          else
            notification_content+="✅ **失败任务**：无"
          fi

          # 保存到环境变量
          echo "NOTIFICATION_CONTENT<<EOF" >> $GITHUB_ENV
          echo -e "$notification_content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # 设置结果标记
          if [[ -n "$success_images" ]]; then
            echo "HAS_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "HAS_SUCCESS=false" >> $GITHUB_ENV
          fi

      - name: 发送通知
        uses: candies404/Multi-Channel-Notifier@latest
        if: ${{ env.HAS_SUCCESS == 'true' }}
        with:
          title: "镜像同步结果"
          content: |
            ${{ env.NOTIFICATION_CONTENT }}
          hitokoto: 'false'
          wpush_key: ${{ secrets.WPUSH_KEY }}
